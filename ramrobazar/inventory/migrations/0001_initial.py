# Generated by Django 4.0 on 2022-06-25 05:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required, unique, max-100', max_length=100, unique=True, verbose_name='brand name')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required, max_length=100', max_length=100, verbose_name='category name')),
                ('slug', models.SlugField(help_text='format: required, letters, numbers, underscore or hyphen', max_length=150, verbose_name='category url')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='format: not required', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='inventory.category', verbose_name='parent category')),
            ],
            options={
                'verbose_name': 'product category',
                'verbose_name_plural': 'product categories',
            },
        ),
        migrations.CreateModel(
            name='ProductOrService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_id', models.CharField(help_text='format: required, unique', max_length=50, unique=True, verbose_name='product web id')),
                ('slug', models.SlugField(help_text='format: required, letters, numbers, underscore or hyphen', max_length=255, verbose_name='product/service url')),
                ('name', models.CharField(help_text='format: required, max_length=250', max_length=250, verbose_name='product/service name')),
                ('description', models.TextField(help_text='format: required', verbose_name='product description')),
                ('is_visible', models.BooleanField(default=True, help_text='format: true->product is visiible', verbose_name='product/service visibility')),
                ('is_blocked', models.BooleanField(default=False, help_text='format: true->product is blocked', verbose_name='product/service blocked')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='format: Y-m-d H:M:S', verbose_name='date product/service created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='format: Y-m-d H:M:S', verbose_name='date product/service last updated')),
                ('is_product', models.BooleanField(default=True, help_text='format: true->product, false->service', verbose_name='Is this product?')),
                ('category', mptt.fields.TreeManyToManyField(to='inventory.Category')),
                ('reported_by', models.ManyToManyField(blank=True, related_name='reported_product', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='product_or_service', to='account.user')),
                ('users_wishlist', models.ManyToManyField(blank=True, related_name='user_wishlist', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SoldStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buyer_status', models.BooleanField(default=False, help_text='format: default=false, true=buyer confirms buying', verbose_name='bought by buyer')),
                ('seller_status', models.BooleanField(default=False, help_text='format: default=false, true=seller confirms selling', verbose_name='sold by seller')),
                ('sold_price', models.DecimalField(decimal_places=2, help_text='format: max price = 99999.99', max_digits=7, verbose_name='Price at which the product or service was sold.')),
                ('sold_units', models.IntegerField(default=0, help_text='number of units/times sold to buyer')),
                ('date_sold', models.DateField(help_text='date when product/service was sold', verbose_name='date sold')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='account.user')),
                ('product_or_service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sold_status', to='inventory.productorservice')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_min', models.DecimalField(blank=True, decimal_places=2, help_text='format: max price = 99999.99', max_digits=7, null=True, verbose_name='Minimum Cost of Service')),
                ('price_max', models.DecimalField(blank=True, decimal_places=2, help_text='format: max price = 99999.99', max_digits=7, null=True, verbose_name='Maximum Cost of Service')),
                ('no_sold_times', models.IntegerField(default=0, verbose_name='No. of times service is sold')),
                ('available_date_start', models.DateField(blank=True, help_text='date when service starts. can be null.', null=True, verbose_name='service start date')),
                ('available_date_end', models.DateField(blank=True, help_text='date when service ends. can be null.', null=True, verbose_name='service end date')),
                ('available_time_start', models.TimeField(blank=True, help_text='time when service starts. can be null.', null=True, verbose_name='service start time')),
                ('available_time_end', models.TimeField(blank=True, help_text='time when service ends. can be null.', null=True, verbose_name='service end time')),
                ('location', models.TextField(blank=True, null=True, verbose_name='available locations')),
                ('product_or_service', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service', to='inventory.productorservice')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_price', models.DecimalField(decimal_places=2, help_text='format: max price = 99999.99', max_digits=7, verbose_name='Cost of Product shown on the site.')),
                ('available_units', models.IntegerField(default=0, verbose_name='available units')),
                ('sold_units', models.IntegerField(default=0, verbose_name='sold units')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='brand_products', to='inventory.brand')),
                ('product_or_service', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product', to='inventory.productorservice')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='default_product.jpg', help_text='format: required, default-default_product.png', upload_to='products', verbose_name='product image')),
                ('alt_text', models.CharField(help_text='format: required, max-255', max_length=255, verbose_name='alternative text')),
                ('is_feature', models.BooleanField(default=False, help_text='format: default=false, true=default/main image', verbose_name='default/main image')),
                ('product_or_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='media', to='inventory.productorservice')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('date_commented', models.DateTimeField(auto_now_add=True, verbose_name='date commented')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.user')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='format: not required', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='comment_children', to='inventory.comment', verbose_name='parent comment')),
                ('product_or_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='inventory.productorservice')),
            ],
            options={
                'ordering': ['-date_commented'],
            },
        ),
    ]
